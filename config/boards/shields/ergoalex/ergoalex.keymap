#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "combos.dtsi"


#define XXX &none
#define ___ &trans

#define DEF 0
#define NAV 1
#define WIN 2
#define NAVWIN 3
#define SPL 4
#define SPR 5
#define NUM 6
#define SYS 7
#define TABL 8

#define TAP 280
#define IDLE 200

/ { 
    macros {
        clh: combo_layer_hybrid {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings
                = <&macro_param_1to1>
                , <&macro_press &mo MACRO_PLACEHOLDER>
                , <&macro_param_2to1>
                , <&macro_tap &kp MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>
                , <&macro_release &mo MACRO_PLACEHOLDER>
                ;
        };
    };
    
    behaviors {
        hr: home_row_mod_right_timeless {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAP>;
            require-prior-idle-ms = <IDLE>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 40>; 
        }; 
        hl: home_row_mod_left_timeless {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAP>;
            require-prior-idle-ms = <IDLE>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 35 36 37 38 39>; 
        };
        colon: colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sft: shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            bindings = <&kp>, <&kp>; 
        };
        sys: system {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            bindings = <&mo>, <&kp>;
        };
        win: windows {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <XXX>, <&to WIN>; 
        };
        mac: macos {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <XXX>, <&to DEF>; 
        };

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp N1        &kp N2        &kp N3     &kp N4      &kp N5                   &kp N6        &kp N7      &kp N8  &kp N9       &kp N0
                &colon        &kp COMMA     &kp DOT    &kp P       &kp Y                    &kp F         &kp G       &kp C   &kp R        &kp L
                &sft LSHFT A  &hl LMETA O   &kp E      &hl LALT U  &hl LCTRL I              &hr RCTRL D   &hr RALT H  &kp T   &hr RMETA N  &sft RSHFT S
                &kp SQT       &kp Q         &kp J      &kp K       &kp X                    &kp B         &kp M       &kp W   &kp V        &kp Z
                                            &kp SPACE  &mo NUM     &sys SYS LG(LS(N4))      &mo SYS       &win        &mo NAV
            >;
        };

        nav_layer {
            bindings = <
            ___        ___        ___        ___        ___                ___           ___           ___       ___            ___
            &kp ESC    &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(FSLH)       &kp PG_UP     &kp LA(LEFT)  &kp UP    &kp LA(RIGHT)  ___
            &kp LSHFT  XXX        &kp BSPC   &kp RET    &kp LCTRL          &kp LG(LEFT)  &kp LEFT      &kp DOWN  &kp RIGHT      &kp LG(RIGHT)
            XXX        XXX        XXX        &kp TAB    ___                &kp PG_DN     ___           ___       ___            ___
                                  ___        ___        ___                ___           ___           ___
            >;
        };

        win_layer {
            bindings = <
                &kp N1        &kp N2        &kp N3     &kp N4      &kp N5                   &kp N6        &kp N7      &kp N8  &kp N9       &kp N0
                &colon        &kp COMMA     &kp DOT    &kp P       &kp Y                    &kp F         &kp G       &kp C   &kp R        &kp L
                &sft LSHFT A  &hl LMETA O   &kp E      &hl LALT U  &hl LCTRL I              &hr RCTRL D   &hr RALT H  &kp T   &hr RMETA N  &sft RSHFT S
                &kp SQT       &kp Q         &kp J      &kp K       &kp X                    &kp B         &kp M       &kp W   &kp V        &kp Z
                                            &kp SPACE  &mo SPR     &sys SYS LG(LS(N4))      &mo SYS       &mac        &mo NAVWIN
            >;
        };

        nav_layer_win {
            bindings = <
            ___        ___        ___        ___        ___                ___        ___           ___       ___            ___
            &kp ESC    &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(FSLH)       &kp PG_UP  &kp LC(LEFT)  &kp UP    &kp LC(RIGHT)  ___
            &kp LSHFT  XXX        &kp BSPC   &kp RET    &kp LCTRL          &kp HOME   &kp LEFT      &kp DOWN  &kp RIGHT      &kp END
            XXX        XXX        XXX        &kp TAB    ___                &kp PG_DN  ___           ___       ___            ___
                                  ___        ___        ___                ___        ___           ___
            >;
        };

        spl_layer {
            bindings = <
                ___       ___       ___       ___       ___           ___  ___  ___  ___  ___
                &kp EXCL  &kp RBRC  &kp RBKT  &kp RPAR  &kp PRCNT     ___  ___  ___  ___  ___
                &kp PLUS  &kp LBRC  &kp LBKT  &kp LPAR  &kp EQUAL     ___  ___  ___  ___  ___
                &kp STAR  &kp HASH  &kp BSLH  &kp FSLH  &kp AT        ___  ___  ___  ___  ___
                                    ___       ___       ___           ___  ___  ___
            >;
        };

        spr_layer {
            bindings = <
                ___  ___  ___  ___  ___     ___        ___       ___        ___        ___
                ___  ___  ___  ___  ___     &kp PIPE   &kp AMPS  &kp UNDER  &kp LT     &kp GT
                ___  ___  ___  ___  ___     &kp EQUAL  ___       ___        &kp QMARK  &kp MINUS
                ___  ___  ___  ___  ___     ___        &kp DLLR  &kp TILDE  &kp CARET  &kp GRAVE
                          ___  ___  ___     ___        ___       ___
            >;
        };

        numpad_layer {
            bindings = <
                ___  ___  ___  ___  ___     ___  ___  ___  ___  ___
                ___  ___  ___  ___  ___     ___     &kp N1  &kp N2  &kp N3  ___
                ___  ___  ___  ___  ___     &kp N0  &kp N4  &kp N5  &kp N6  ___
                ___  ___  ___  ___  ___     ___     &kp N7  &kp N8  &kp N9  ___
                          ___  ___  ___     ___  ___  ___
            >;
        };

        sys_layer {
            bindings = <
                ___           ___           ___           ___           ___               ___          ___  ___  ___  ___
                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      ___          ___  ___  ___  ___
                XXX           XXX           XXX           XXX           &sys_reset        &sys_reset   ___  ___  ___  ___
                &bt BT_CLR    XXX           XXX           XXX           &bootloader       &bootloader  ___  ___  ___  ___
                                            ___           XXX           XXX               ___          ___  ___
            >;
        };

        tabs_layer {
            bindings = <
                ___  ___  ___  ___  ___     ___  ___  ___  ___  ___
                ___  ___  ___  ___  ___     ___  ___  ___  ___  ___
                ___  ___  ___  ___  ___     ___  LG(LS(PG_UP))  ___  LG(LS(PG_DN))  ___
                ___  ___  ___  ___  ___     ___  ___  ___  ___  ___
                          ___  ___  ___     ___  ___  ___
            >;
        };

        blank_layer {
            bindings = <
                ___  ___  ___  ___  ___     ___  ___  ___  ___  ___
                ___  ___  ___  ___  ___     ___  ___  ___  ___  ___
                ___  ___  ___  ___  ___     ___  ___  ___  ___  ___
                ___  ___  ___  ___  ___     ___  ___  ___  ___  ___
                          ___  ___  ___     ___  ___  ___
            >;
        };
        
    };
};
