#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


#define XXX &none
#define ___ &trans

#define DEF 0
#define NAV 1
#define SPL 2
#define SPR 3
#define NUM 4
#define SYS 5

#define COMBO 65
#define TAP 280
#define IDLE 150
#define COMBO_IDLE 50

/ { 

    macros {
        mac: macro_layer_tap {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings
                = <&macro_param_1to1>
                , <&macro_press &mo MACRO_PLACEHOLDER>
                , <&macro_param_2to1>
                , <&macro_tap &kp MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>
                , <&macro_release &mo MACRO_PLACEHOLDER>
                ;
        };

        mac2: macro_press_tap {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings
                = <&macro_param_1to1>
                , <&macro_press &kp MACRO_PLACEHOLDER>
                , <&macro_param_2to1>
                , <&macro_tap &kp MACRO_PLACEHOLDER>
                , <&macro_pause_for_release>
                , <&macro_param_1to1>
                , <&macro_release &kp MACRO_PLACEHOLDER>
                ;
        };  
    };
    
    combos {
        compatible = "zmk,combos";

        l_combo_excl {
            timeout-ms = <COMBO>;
            key-positions = <17 0>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPL EXCL>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        l_combo_rbrc {
            timeout-ms = <COMBO>;
            key-positions = <17 1>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPL RBRC>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        l_combo_rbkt {
            timeout-ms = <COMBO>;
            key-positions = <17 2>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPL RBKT>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        l_combo_rpar {
            timeout-ms = <COMBO>;
            key-positions = <17 3>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPL RPAR>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        l_combo_prcnt {
            timeout-ms = <COMBO>;
            key-positions = <17 4>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPL PRCNT>;
            require-prior-idle-ms = <COMBO_IDLE>;
        }; 
        l_combo_plus {
            timeout-ms = <COMBO>;
            key-positions = <17 10>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPL PLUS>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        l_combo_lbrc {
            timeout-ms = <COMBO>;
            key-positions = <17 11>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPL LBRC>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        l_combo_lbkt {
            timeout-ms = <COMBO>;
            key-positions = <17 12>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPL LBKT>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        l_combo_lpar {
            timeout-ms = <COMBO>;
            key-positions = <17 13>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPL LPAR>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        l_combo_equal {
            timeout-ms = <COMBO>;
            key-positions = <17 14>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPL EQUAL>;
            require-prior-idle-ms = <COMBO_IDLE>; 
        };
        l_combo_star {
            timeout-ms = <COMBO>;
            key-positions = <17 20>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPL STAR>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        l_combo_hash {
            timeout-ms = <COMBO>;
            key-positions = <17 21>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPL HASH>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        l_combo_bslh {
            timeout-ms = <COMBO>;
            key-positions = <17 22>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPL BSLH>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        l_combo_fslh {
            timeout-ms = <COMBO>;
            key-positions = <17 23>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPL FSLH>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        l_combo_at {
            timeout-ms = <COMBO>;
            key-positions = <17 24>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPL AT>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };


        r_combo_amps {
            timeout-ms = <COMBO>;
            key-positions = <12 6>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPR AMPS>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_pipe {
            timeout-ms = <COMBO>;
            key-positions = <12 7>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPR PIPE>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_lt {
            timeout-ms = <COMBO>;
            key-positions = <12 8>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPR LT>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_gt {
            timeout-ms = <COMBO>;
            key-positions = <12 9>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPR GT>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_equal {
            timeout-ms = <COMBO>;
            key-positions = <12 15>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPR EQUAL>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_grave {
            timeout-ms = <COMBO>;
            key-positions = <12 16>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPR GRAVE>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_qmark {
            timeout-ms = <COMBO>;
            key-positions = <12 18>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPR QMARK>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_minus {
            timeout-ms = <COMBO>;
            key-positions = <12 19>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPR MINUS>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_dllr {
            timeout-ms = <COMBO>;
            key-positions = <12 26>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPR DLLR>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_tilde {
            timeout-ms = <COMBO>;
            key-positions = <12 27>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPR TILDE>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_caret {
            timeout-ms = <COMBO>;
            key-positions = <12 28>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPR CARET>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_under {
            timeout-ms = <COMBO>;
            key-positions = <12 29>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac SPR UNDER>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };


        r_combo_five {
            timeout-ms = <COMBO>;
            key-positions = <33 0>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac NUM N5>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_six {
            timeout-ms = <COMBO>;
            key-positions = <33 1>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac NUM N6>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_seven {
            timeout-ms = <COMBO>;
            key-positions = <33 2>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac NUM N7>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_eight {
            timeout-ms = <COMBO>;
            key-positions = <33 3>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac NUM N8>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_nine {
            timeout-ms = <COMBO>;
            key-positions = <33 4>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac NUM N9>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_zero {
            timeout-ms = <COMBO>;
            key-positions = <33 10>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac NUM N0>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_one {
            timeout-ms = <COMBO>;
            key-positions = <33 11>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac NUM N1>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_two {
            timeout-ms = <COMBO>;
            key-positions = <33 12>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac NUM N2>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_three {
            timeout-ms = <COMBO>;
            key-positions = <33 13>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac NUM N3>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };
        r_combo_four {
            timeout-ms = <COMBO>;
            key-positions = <33 14>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac NUM N4>;
            require-prior-idle-ms = <COMBO_IDLE>;
        };


        sft_combo_double_quote {
            timeout-ms = <COMBO>;
            key-positions = <19 20>;
            layers = <DEF>;
            slow-release;
            bindings = <&mac2 RSHFT SQT>;
        };
    };



    behaviors {
        colon: colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hl: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>; 
        };

        hr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>; 
        };

        sft: shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            bindings = <&kp>, <&kp>; 
        };

        sys: system {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            bindings = <&mo>, <&kp>;
        };

        hl2: home_row_mod_left_timeless {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAP>;
            require-prior-idle-ms = <IDLE>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>; 
        };

        hr2: home_row_mod_right_timeless {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAP>;
            require-prior-idle-ms = <IDLE>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>; 
        };

    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &colon        &kp COMMA     &kp DOT  &kp P               &kp Y                    &kp F         &kp G        &kp C  &kp R         &kp L
                &sft LSHFT A  &hr2 LMETA O  &kp E    &hr2 LALT U         &hr2 LCTRL I             &hl2 RCTRL D  &hl2 RALT H  &kp T  &hl2 RMETA N  &sft RSHFT S
                &kp SQT       &kp Q         &kp J    &kp K               &kp X                    &kp B         &kp M        &kp W  &kp V         &kp Z
                                                     &sys SYS LG(SPACE)  &kp SPACE                &mo NAV       &mo NUM
            >;
        };

        nav_layer {
            bindings = <
            &kp ESC         &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(FSLH)       &kp PG_UP     &kp LA(LEFT)  &kp UP    &kp LA(RIGHT)  ___
            &kp LSHFT       &kp LG(Z)  &kp BSPC   &kp RET    ___                &kp LG(LEFT)  &kp LEFT      &kp DOWN  &kp RIGHT      &kp LG(RIGHT)
            &kp LG(LS(N4))  ___        ___        &kp TAB    ___                &kp PG_DN     ___           ___       ___            ___
                                                  ___        ___                ___           ___   
            >;
        };

        spl_layer {
            bindings = <
                &kp EXCL  &kp RBRC  &kp RBKT  &kp RPAR  &kp PRCNT     ___  ___  ___  ___  ___
                &kp PLUS  &kp LBRC  &kp LBKT  &kp LPAR  &kp EQUAL     ___  ___  ___  ___  ___
                &kp STAR  &kp HASH  &kp BSLH  &kp FSLH  &kp AT        ___  ___  ___  ___  ___
                                              ___       ___           ___  ___
            >;
        };

        spr_layer {
            bindings = <
                ___  ___  ___  ___  ___     ___        &kp AMPS   &kp PIPE   &kp LT     &kp GT
                ___  ___  ___  ___  ___     &kp EQUAL  &kp UNDER  ___        &kp QMARK  &kp MINUS
                ___  ___  ___  ___  ___     ___        &kp DLLR   &kp TILDE  &kp CARET  &kp GRAVE
                               ___  ___     ___        ___
            >;
        };
        

        num_layer {
            bindings = <
                &kp N5  &kp N6  &kp N7   &kp N8  &kp N9     ___  ___  ___  ___  ___
                &kp N0  &kp N1  &kp N2   &kp N3  &kp N4     ___  ___  ___  ___  ___
                ___     ___     ___      ___     ___        ___  ___  ___  ___  ___
                                         ___     ___        ___  ___
            >;
        };

        sys_layer {
            bindings = <
                &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      ___          ___  ___  ___  ___
                XXX           XXX           XXX           XXX           &sys_reset        &sys_reset   ___  ___  ___  ___
                &bt BT_CLR    XXX           XXX           XXX           &bootloader       &bootloader  ___  ___  ___  ___
                                                          XXX           XXX               ___          ___ 
            >;
        };

        blank_layer {
            bindings = <
                ___  ___  ___  ___  ___     ___  ___  ___  ___  ___
                ___  ___  ___  ___  ___     ___  ___  ___  ___  ___
                ___  ___  ___  ___  ___     ___  ___  ___  ___  ___
                               ___  ___     ___  ___
            >;
        };
        
    };
};
